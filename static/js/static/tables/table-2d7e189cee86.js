// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.on("start", function() {
    /*
      Event to initiate the main app
    */

    return Denigma.Table.main();
  });

  Denigma.Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      _ref = Model.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Model;

  })(Batman);

  /*
    [{"pk":1,"model":"lifespan.member","fields":{"salary":0,"organization":"Denigma","age":10,"surname":"surname_0","name":"username_0"}},
    {"pk":2,"model":"lifespan.member","fields":{"salary":1000,"organization":"Denigma","age":11,"surname":"surname_1","name":"username_1"}}
    ,{"pk":3,"model":"lifespan.member","fields":{"salary":2000,"organization":"Denigma","age":12,"surname":"surname_2","name":"username_2"}}]
  */


  Denigma.Row = (function(_super) {
    __extends(Row, _super);

    function Row() {
      _ref1 = Row.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Row;

  })(Denigma.BasicView);

  Denigma.Table = (function(_super) {
    __extends(Table, _super);

    function Table(selector, subclass) {
      /*
        jquery-like selector string is passed,
        something like '#lifespan'
      */

      Table.__super__.constructor.call(this, selector, "tr", subclass);
    }

    Table.prototype.append = function(novel) {
      return novel.append("tr").data(function(d) {
        var key, value;
        return [
          (function() {
            var _results;
            _results = [];
            for (key in d) {
              value = d[key];
              _results.push(key);
            }
            return _results;
          })()
        ];
      }).selectAll("td").append("td");
    };

    Table.prototype.update = function(sel) {
      return sel.selectAll("td").text(function(d, i) {
        return d[i];
      });
    };

    Table.prototype.draw = function(data) {
      var novel, sel;
      sel = this.select(data);
      this.hide(sel.exit());
      novel = this.append(sel.enter());
      return this.update(sel);
    };

    Table.prototype.select = function(data) {
      return this.node.selectAll("table." + this.subclass).data(data);
    };

    Table.prototype.parse = function(data) {
      document.write(JSON.stringify(data));
      alert("does not work yet!");
      return this.draw(data);
    };

    Table.prototype.load = function(uri) {
      var fun,
        _this = this;
      fun = function(data) {
        return _this.parse(data);
      };
      return d3.json(uri, fun);
    };

    Table.main = function() {
      var table;
      table = new Denigma.Table("table", "member");
      return table.load('/data');
    };

    return Table;

  })(Denigma.Control);

  Denigma.Message = (function(_super) {
    __extends(Message, _super);

    /*
    model for messages
    contains text and user fields
    */


    function Message() {
      _ref2 = Message.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Message.encode('id', 'text', 'user');

    /*
      id and two other fields to be stored: text and user
      when you make models do not forget about id
    */


    Message.validate('text', {
      presence: true
    });

    /*
      validate if text is present each time we create Message
    */


    Message.persist(Batman.LocalStorage);

    Message.storageKey = 'messages';

    return Message;

  })(Batman.Model);

}).call(this);
