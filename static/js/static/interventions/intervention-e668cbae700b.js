// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.Intervention = (function(_super) {
    __extends(Intervention, _super);

    /*
      Intervention with animal
    */


    Intervention.accessor("number", {
      get: function() {
        return this.test.get("number") + this.control.get("number");
      }
    });

    Intervention.accessor("deltaNumber", {
      get: function() {
        return this.test.get("number") - this.control.get("number");
      }
    });

    Intervention.accessor("deltaMax", {
      get: function() {
        return this.test.get("max") - this.control.get("max");
      }
    });

    Intervention.accessor("deltaMean", {
      get: function() {
        return this.test.get("mean") - this.control.get("mean");
      }
    });

    Intervention.accessor("deltaMin", {
      get: function() {
        return this.test.get("min") - this.control.get("min");
      }
    });

    function Intervention(animal, manipulation, test, control) {
      this.animal = animal;
      this.manipulation = manipulation;
      this.test = test;
      this.control = control;
      /*
        constructor that stores test, control groups and manipulations
      */

    }

    return Intervention;

  })(Batman.Object);

}).call(this);
