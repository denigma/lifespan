// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.Charts = (function() {
    /*
      class to generate chars with d3js
    
      WARNING: the code is very dirty with a lot of hardcoded stuff :(((((((((
    */

    Charts.prototype.node = void 0;

    Charts.prototype.svg = void 0;

    Charts.prototype.resources = "static/interventions/resources";

    Charts.prototype.marginX = 10;

    Charts.prototype.marginY = 10;

    Charts.prototype.colMargin = 5;

    Charts.prototype.minW = 10;

    Charts.prototype.width = 0;

    Charts.prototype.minH = 5;

    Charts.prototype.height = 0;

    Charts.prototype.iconW = 64;

    Charts.prototype.iconH = 64;

    Charts.prototype.colHeight = 56;

    Charts.prototype.dur = 1700;

    function Charts(selector) {
      this.selector = selector;
      this.getControlPos = __bind(this.getControlPos, this);
      this.getControlMax = __bind(this.getControlMax, this);
      this.getControlMedian = __bind(this.getControlMedian, this);
      this.getControlMean = __bind(this.getControlMean, this);
      this.getControlMin = __bind(this.getControlMin, this);
      this.getTestPos = __bind(this.getTestPos, this);
      this.getTestMax = __bind(this.getTestMax, this);
      this.getTestMedian = __bind(this.getTestMedian, this);
      this.getTestMean = __bind(this.getTestMean, this);
      this.getTestMin = __bind(this.getTestMin, this);
      this.getManipulationPic = __bind(this.getManipulationPic, this);
      this.getAnimalPic = __bind(this.getAnimalPic, this);
      this.getBottomPos = __bind(this.getBottomPos, this);
      this.getMiddlePos = __bind(this.getMiddlePos, this);
      this.getTopPos = __bind(this.getTopPos, this);
      /*
        jquery-like selector string is passed,
        something like '#lifespan'
      */

      this.node = d3.select(this.selector);
      this.svg = this.node.append("svg");
    }

    Charts.prototype.select = function(data) {
      return this.svg.selectAll("svg").data(data);
    };

    Charts.prototype.enter = function(data) {
      return this.select(data).enter();
    };

    Charts.prototype.exit = function(data) {
      return this.select(data).exit();
    };

    Charts.prototype.setSize = function(w, h) {
      /*
        sets size of the main svg
      */

      this.width = w;
      this.height = h;
      return this.svg.attr("width", w).attr("height", h);
    };

    Charts.prototype.getTopPos = function(d, i) {
      return i * (this.colHeight - this.colMargin);
    };

    Charts.prototype.getMiddlePos = function(d, i) {
      return i * (this.colHeight - this.colMargin) + (this.colHeight - this.colMargin) / 2;
    };

    Charts.prototype.getBottomPos = function(d, i) {
      return (i + 1) * (this.colHeight - this.colMargin) - this.colMargin * 2;
    };

    Charts.prototype.addDecor = function(col) {
      /*
        adds column decorations
      */

      var border, h, pos;
      pos = this.getTopPos;
      h = this.colHeight;
      border = col.append("rect");
      return border.attr("class", "decor").attr("width", this.width).attr("height", this.colHeight).attr("rx", 15).attr("ry", 15).attr("y", pos);
    };

    Charts.prototype.addIcons = function(col) {
      /*
        this function add all icons to the column and groups them inside svg
      */

      var h, icon;
      h = this.colHeight - this.colMargin;
      icon = col.append("svg");
      icon.attr("class", "icon");
      icon.append("image").attr("class", "animal");
      icon.append("image").attr("class", "control");
      return icon.append("image").attr("class", "manipulation");
    };

    Charts.prototype.getAnimalPic = function(d) {
      return "" + this.resources + "/" + d.animal.icon;
    };

    Charts.prototype.getManipulationPic = function(d) {
      return "" + this.resources + "/" + d.manipulation.icon;
    };

    Charts.prototype.updateIcons = function(sel) {
      /*
        make all icons drawing and binding routine
      */

      var gma, gpa, h, pos, posM;
      h = this.colHeight - this.colMargin / 2;
      pos = this.getTopPos;
      posM = this.getMiddlePos;
      /*
        redraws icons in accordance with binding info
      */

      gpa = this.getAnimalPic;
      sel.select("image.animal").attr("xlink:href", gpa).attr("x", this.marginX).attr("y", pos).attr("width", h).attr("height", h);
      sel.select("image.control").attr("xlink:href", gpa).attr("x", this.marginX + h).attr("y", pos).attr("width", h / 2).attr("height", h / 2);
      gma = this.getManipulationPic;
      return sel.select("image.manipulation").attr("xlink:href", gma).attr("x", this.marginX + h).attr("y", posM).attr("width", h / 2).attr("height", h / 2);
    };

    Charts.prototype.addTest = function(col) {
      var h, test;
      h = this.colHeight - this.colMargin / 2;
      test = col.append("svg");
      test.attr("class", "test").attr("x", h * 2 - this.marginX);
      test.append("rect").attr("class", "max");
      test.append("rect").attr("class", "mean");
      return test.append("rect").attr("class", "min");
    };

    Charts.prototype.addControl = function(col) {
      var control, h;
      h = this.colHeight - this.colMargin / 2;
      control = col.append("svg");
      control.attr("class", "control").attr("x", h * 2 - this.marginX);
      control.append("rect").attr("class", "max");
      control.append("rect").attr("class", "mean");
      return control.append("rect").attr("class", "min");
    };

    Charts.prototype.addBars = function(col) {
      /*
        this function add all icons to the column and groups them inside svg
      */

      this.addTest(col);
      return this.addControl(col);
    };

    Charts.prototype.scale = function() {
      return 12;
    };

    Charts.prototype.updateBar = function(bar, pos, val) {
      /*
        updates any bar
      */

      bar.attr("x", 0).attr("y", pos).attr("width", this.minW).attr("height", this.minH);
      return bar.transition().duration(this.dur).attr("width", val);
    };

    Charts.prototype.getTestMin = function(d) {
      return this.scale() * d.test.get("min");
    };

    Charts.prototype.getTestMean = function(d) {
      return this.scale() * d.test.get("mean");
    };

    Charts.prototype.getTestMedian = function(d) {
      return this.scale() * d.test.get("median");
    };

    Charts.prototype.getTestMax = function(d) {
      return this.scale() * d.test.get("max");
    };

    Charts.prototype.getTestPos = function(d, i) {
      return i * (this.colHeight - this.colMargin) + this.colHeight / 2 + this.colMargin;
    };

    Charts.prototype.updateTests = function(sel) {
      /*
       redraws bars in accordance with binding info
      */

      var gtMax, gtMean, gtMin, h, max, mean, min, posB;
      gtMax = this.getTestMax;
      gtMean = this.getTestMean;
      gtMin = this.getTestMin;
      h = this.colHeight - this.colMargin / 2;
      posB = this.getTestPos;
      min = sel.select(".test .min");
      mean = sel.select(".test .mean");
      max = sel.select(".test .max");
      this.updateBar(min, posB, gtMin);
      this.updateBar(mean, posB, gtMean);
      return this.updateBar(max, posB, gtMax);
    };

    Charts.prototype.getControlMin = function(d) {
      return this.scale() * d.control.get("min");
    };

    Charts.prototype.getControlMean = function(d) {
      return this.scale() * d.control.get("mean");
    };

    Charts.prototype.getControlMedian = function(d) {
      return this.scale() * d.control.get("median");
    };

    Charts.prototype.getControlMax = function(d) {
      return this.scale() * d.control.get("max");
    };

    Charts.prototype.getControlPos = function(d, i) {
      return i * (this.colHeight - this.colMargin) + this.colMargin * 3;
    };

    Charts.prototype.updateControl = function(sel) {
      /*
       redraws bars in accordance with binding info
      */

      var gcMax, gcMean, gcMin, h, max, mean, min, pos;
      gcMax = this.getControlMax;
      gcMean = this.getControlMean;
      gcMin = this.getControlMin;
      h = this.colHeight - this.colMargin / 2;
      pos = this.getControlPos;
      min = sel.select(".control .min");
      mean = sel.select(".control .mean");
      max = sel.select(".control .max");
      this.updateBar(min, pos, gcMin);
      this.updateBar(mean, pos, gcMean);
      return this.updateBar(max, pos, gcMax);
    };

    Charts.prototype.updateBars = function(sel) {
      this.updateTests(sel);
      return this.updateControl(sel);
    };

    Charts.prototype.addShapes = function(novel) {
      var col;
      col = novel.append('svg');
      col.attr("class", "column");
      this.addDecor(col);
      this.addIcons(col);
      this.addBars(col);
      return novel;
    };

    Charts.prototype.draw = function(data) {
      var novel, sel, x, y;
      sel = this.select(data);
      novel = this.addShapes(sel.enter());
      this.updateIcons(sel);
      this.updateBars(sel);
      y = d3.scale.ordinal().domain(30);
      return x = this.makeOX(data);
    };

    Charts.prototype.drawBars = function(sel, ox, oy) {
      var c, tests,
        _this = this;
      c = 20;
      tests = sel.selectAll(".test");
      tests.attr("x", this.iconW).attr("width", 10);
      return tests.transition().duration(800).attr("y", function(d, i) {
        return i * c;
      }).attr("width", this.dXmax(ox)).attr("height", c);
      /*
      #sel.enter()
      sel.append("rect").attr("class","mean").transition().duration(800)
        .attr("y", (d,i)=>i*c)
        .attr("width", @dXmean(ox))
        .attr("height", c)
        .style("fill","green")
        .style("opacity",0.2)
      */

    };

    return Charts;

  })();

  Denigma.LifeCharts = (function(_super) {
    __extends(LifeCharts, _super);

    function LifeCharts(selector) {
      this.makeOY = __bind(this.makeOY, this);
      this.dXmax = __bind(this.dXmax, this);
      this.dXmean = __bind(this.dXmean, this);
      this.dXmin = __bind(this.dXmin, this);
      LifeCharts.__super__.constructor.call(this, selector);
    }

    LifeCharts.prototype.dMin = function(d) {
      return d.test.get("min");
    };

    LifeCharts.prototype.dMean = function(d) {
      return d.test.get("mean");
    };

    LifeCharts.prototype.dMax = function(d) {
      return d.test.get("max");
    };

    LifeCharts.prototype.makeOX = function(data) {
      var fun;
      fun = this.dMax;
      return d3.scale.linear().domain([0, d3.max(data, fun)]).range([this.marginX, this.width - this.marginX]);
    };

    LifeCharts.prototype.dXmin = function(ox) {
      var _this = this;
      return function(d) {
        return ox(_this.dMin(d));
      };
    };

    LifeCharts.prototype.dXmean = function(ox) {
      var _this = this;
      return function(d) {
        return ox(_this.dMean(d));
      };
    };

    LifeCharts.prototype.dXmax = function(ox) {
      var _this = this;
      return function(d) {
        return ox(_this.dMax(d));
      };
    };

    LifeCharts.prototype.makeOY = function(data) {
      return this.oy = d3.scale.ordinal().domain().rangeBands([this.marginY, this.height - this.marginY]);
    };

    return LifeCharts;

  })(Denigma.Charts);

}).call(this);
