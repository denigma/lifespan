// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.ExperimentBar = (function(_super) {
    __extends(ExperimentBar, _super);

    /*
      creates a bar for interventions
    */


    ExperimentBar.prototype.scale = void 0;

    function ExperimentBar(poser, group, minW, minH) {
      this.group = group;
      this.minW = minW;
      this.minH = minH;
      ExperimentBar.__super__.constructor.call(this, poser);
    }

    ExperimentBar.prototype.append = function(row) {
      var control;
      control = row.append("svg");
      control.attr("class", this.group);
      control.append("rect").attr("class", "max");
      control.append("rect").attr("class", "mean");
      return control.append("rect").attr("class", "min");
    };

    ExperimentBar.prototype.updateBar = function(sel, key, posY, h) {
      var bar, fun,
        _this = this;
      if (h == null) {
        h = this.minH;
      }
      fun = function(d) {
        return _this.scale(d[_this.group].get(key));
      };
      bar = sel.select("." + this.group + " rect." + key);
      bar.attr("x", 0).attr("y", posY).attr("width", this.minW).attr("height", h);
      return bar.transition().duration(this.poser.dur).attr("width", fun).attr("rx", 3).attr("ry", 3);
    };

    ExperimentBar.prototype.update = function(sel) {
      var h, posY;
      h = this.minH;
      posY = this.poser.getMiddlePos(h);
      this.updateBar(sel, "min", posY, h);
      this.updateBar(sel, "mean", posY, h);
      return this.updateBar(sel, "max", posY, h);
    };

    return ExperimentBar;

  })(Denigma.BasicView);

}).call(this);
