// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.BarView = (function(_super) {
    __extends(BarView, _super);

    function BarView(poser, minW, minH, dur) {
      this.minW = minW;
      this.minH = minH;
      this.dur = dur;
      BarView.__super__.constructor.call(this, poser);
    }

    BarView.prototype.addTest = function(row) {
      var test;
      test = row.append("svg");
      test.attr("class", "test");
      test.append("rect").attr("class", "max");
      test.append("rect").attr("class", "mean");
      return test.append("rect").attr("class", "min");
    };

    BarView.prototype.addControl = function(row) {
      var control;
      control = row.append("svg");
      control.attr("class", "control");
      control.append("rect").attr("class", "max");
      control.append("rect").attr("class", "mean");
      return control.append("rect").attr("class", "min");
    };

    BarView.prototype.updateBar = function(bar, pos, val, h) {
      /*
        updates any bar
      */

      if (h == null) {
        h = this.minH;
      }
      bar.attr("x", 0).attr("y", pos).attr("width", this.minW).attr("height", h);
      return bar.transition().duration(this.dur).attr("width", val).attr("rx", 3).attr("ry", 3);
    };

    BarView.prototype.updateTests = function(sel) {
      /*
       redraws bars in accordance with binding info
      */

      var gtMax, gtMean, gtMin, h, max, mean, min, pos;
      gtMax = Denigma.Intervention.getTestMax;
      gtMean = Denigma.Intervention.getTestMean;
      gtMin = Denigma.Intervention.getTestMin;
      h = this.minH;
      pos = this.poser.getMiddlePos(h);
      min = sel.select(".test .min");
      mean = sel.select(".test .mean");
      max = sel.select(".test .max");
      this.updateBar(min, pos, gtMin, h);
      this.updateBar(mean, pos, gtMean, h);
      return this.updateBar(max, pos, gtMax, h);
    };

    BarView.prototype.updateControl = function(sel) {
      /*
       redraws bars in accordance with binding info
      */

      var gcMax, gcMean, gcMin, h, max, mean, min, pos;
      gcMax = Denigma.Intervention.getControlMax;
      gcMean = Denigma.Intervention.getControlMean;
      gcMin = Denigma.Intervention.getControlMin;
      h = this.minH * 3;
      pos = this.poser.getMiddlePos(h);
      min = sel.select(".control .min");
      mean = sel.select(".control .mean");
      max = sel.select(".control .max");
      this.updateBar(min, pos, gcMin, h);
      this.updateBar(mean, pos, gcMean, h);
      return this.updateBar(max, pos, gcMax, h);
    };

    BarView.prototype.append = function(novel) {
      this.addControl(novel);
      return this.addTest(novel);
    };

    BarView.prototype.update = function(sel) {
      this.updateTests(sel);
      return this.updateControl(sel);
    };

    return BarView;

  })(Denigma.BasicView);

}).call(this);
