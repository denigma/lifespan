// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.BarView = (function(_super) {
    __extends(BarView, _super);

    BarView.prototype.width = void 0;

    function BarView(poser, minW, minH, dur) {
      this.minW = minW;
      this.minH = minH;
      this.dur = dur;
      BarView.__super__.constructor.call(this, poser);
    }

    BarView.prototype.addTest = function(row) {
      var test;
      test = row.append("svg");
      test.attr("class", "test");
      test.append("rect").attr("class", "max");
      test.append("rect").attr("class", "mean");
      return test.append("rect").attr("class", "min");
      /*
        test.append("text").attr("class","max").text("max")
        test.append("text").attr("class","mean").text("mean")
        test.append("text").attr("class","min").text("min")
      */

    };

    BarView.prototype.addControl = function(row) {
      var control, posY;
      control = row.append("svg");
      control.attr("class", "control");
      posY = this.poser.getMiddlePos();
      control.append("rect").attr("class", "max");
      control.append("rect").attr("class", "mean");
      return control.append("rect").attr("class", "min");
    };

    BarView.prototype.updateBars = function(sel, group, key, posY, h) {
      var bar, fun,
        _this = this;
      if (h == null) {
        h = this.minH;
      }
      fun = function(d) {
        return _this.scale(d[group].get(key));
      };
      bar = sel.select("." + group + " rect." + key);
      bar.attr("x", 0).attr("y", posY).attr("width", this.minW).attr("height", h);
      return bar.transition().duration(this.dur).attr("width", fun).attr("rx", 3).attr("ry", 3);
    };

    BarView.prototype.updateTests = function(sel) {
      var h, posY;
      h = this.minH;
      posY = this.poser.getMiddlePos(h);
      this.updateBars(sel, "test", "min", posY);
      this.updateBars(sel, "test", "mean", posY);
      return this.updateBars(sel, "test", "max", posY);
    };

    BarView.prototype.updateControl = function(sel) {
      var h, posY;
      h = this.minH * 3;
      posY = this.poser.getMiddlePos(h);
      this.updateBars(sel, "control", "min", posY, h);
      this.updateBars(sel, "control", "mean", posY, h);
      return this.updateBars(sel, "control", "max", posY, h);
    };

    BarView.prototype.append = function(novel) {
      this.addControl(novel);
      return this.addTest(novel);
    };

    BarView.prototype.update = function(sel) {
      this.makeScale(sel);
      this.updateTests(sel);
      return this.updateControl(sel);
    };

    BarView.prototype.makeScale = function(sel) {
      var data, max;
      this.width = sel.attr("width");
      data = sel.data();
      max = d3.max(data, function(d) {
        return d.get("max");
      });
      return this.scale = d3.scale.linear().domain([0, max]).range([0, this.width - this.poser.rowMargin]);
    };

    return BarView;

  })(Denigma.BasicView);

}).call(this);
