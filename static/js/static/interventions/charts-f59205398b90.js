// Generated by CoffeeScript 1.6.3
(function() {
  Denigma.Charts = (function() {
    /*
      class to generate chars with d3js
    
      WARNING: the code is very dirty with a lot of hardcoded stuff :(((((((((
    */

    Charts.prototype.node = void 0;

    Charts.prototype.svg = void 0;

    Charts.prototype.marginY = 10;

    Charts.prototype.width = 0;

    Charts.prototype.height = 0;

    Charts.prototype.poser = void 0;

    Charts.prototype.iconView = void 0;

    Charts.prototype.decorView = void 0;

    Charts.prototype.iconWidth = 180;

    Charts.prototype.dur = 2000;

    Charts.prototype.durNew = 400;

    function Charts(selector) {
      var dur, marginX, minH, minW, poser, resources, rowHeight, rowMargin;
      this.selector = selector;
      /*
        jquery-like selector string is passed,
        something like '#lifespan'
      */

      this.poser = new Denigma.RowPoser(rowMargin = 10, rowHeight = 56, marginX = 10);
      this.decorView = new Denigma.DecorView(this.poser, this.width);
      this.iconView = new Denigma.IconView(poser = this.poser, resources = "static/interventions/resources", dur = this.dur);
      this.barView = new Denigma.BarView(poser = this.poser, minW = 10, minH = 10, dur = this.dur);
      this.node = d3.select(this.selector);
      this.svg = this.node.append("svg");
    }

    Charts.prototype.select = function(data) {
      return this.svg.selectAll("svg.row").data(data);
    };

    Charts.prototype.enter = function(data) {
      return this.select(data).enter();
    };

    Charts.prototype.exit = function(data) {
      return this.select(data).exit();
    };

    Charts.prototype.setSize = function(w, h) {
      /*
        sets size of the main svg
      */

      this.width = w;
      this.height = h;
      this.decorView.width = w;
      return this.svg.attr("width", w).attr("height", h);
    };

    Charts.prototype.append = function(novel) {
      var bars, icons, rows;
      rows = novel.append('svg');
      rows.attr("class", "row");
      rows.attr("y", 0);
      this.decorView.append(rows);
      icons = rows.append("svg");
      icons.attr("class", "icon");
      this.iconView.append(icons);
      bars = rows.append("svg");
      bars.attr("class", "bar").attr("x", this.iconWidth);
      this.barView.append(bars);
      return novel;
    };

    Charts.prototype.draw = function(data) {
      var novel, sel;
      sel = this.select(data);
      this.hide(sel.exit());
      novel = this.append(sel.enter());
      return this.update(sel);
    };

    Charts.prototype.hide = function(sel) {
      var tr;
      tr = sel.transition();
      tr.duration(this.durNew).attr("y", 0);
      return tr.delay(this.durNew).remove();
    };

    Charts.prototype.update = function(sel) {
      var bars, icons, pos;
      pos = this.poser.getRowPos;
      icons = sel.select("svg.icon");
      icons.attr("width", this.iconWidth);
      this.iconView.update(icons);
      bars = sel.select("svg.bar");
      bars.attr("x", this.iconWidth);
      bars.attr("width", this.width - this.iconWidth);
      this.barView.update(bars);
      return sel.transition().duration(this.durNew).attr("y", pos).attr("width", this.width);
    };

    return Charts;

  })();

}).call(this);
