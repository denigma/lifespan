// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.Charts = (function() {
    /*
      class to generate chars with d3js
    
      WARNING: the code is very dirty with a lot of hardcoded stuff :(((((((((
    */

    Charts.prototype.node = void 0;

    Charts.prototype.svg = void 0;

    Charts.prototype.marginY = 10;

    Charts.prototype.width = 0;

    Charts.prototype.height = 0;

    Charts.prototype.iconW = 64;

    Charts.prototype.iconH = 64;

    Charts.prototype.poser = void 0;

    Charts.prototype.iconView = void 0;

    function Charts(selector) {
      var dur, marginX, minH, minW, poser, rowHeight, rowMargin;
      this.selector = selector;
      /*
        jquery-like selector string is passed,
        something like '#lifespan'
      */

      this.poser = new Denigma.RowPoser(rowMargin = 10, rowHeight = 56, marginX = 10);
      this.iconView = new Denigma.IconView(this.poser, "static/interventions/resources", dur = 2000);
      this.barView = new Denigma.BarView(poser = this.poser, minW = 10, minH = 10, dur = 2000);
      this.node = d3.select(this.selector);
      this.svg = this.node.append("svg");
    }

    Charts.prototype.select = function(data) {
      return this.svg.selectAll("svg").data(data);
    };

    Charts.prototype.enter = function(data) {
      return this.select(data).enter();
    };

    Charts.prototype.exit = function(data) {
      return this.select(data).exit();
    };

    Charts.prototype.setSize = function(w, h) {
      /*
        sets size of the main svg
      */

      this.width = w;
      this.height = h;
      return this.svg.attr("width", w).attr("height", h);
    };

    Charts.prototype.addDecor = function(row) {
      /*
        adds rowumn decorations
      */

      var border, h, pos;
      h = this.poser.contentHeight();
      pos = this.poser.getTopPos;
      border = row.append("rect");
      return border.attr("class", "decor").attr("width", this.width).attr("height", h).attr("rx", 10).attr("ry", 10).attr("y", pos);
    };

    Charts.prototype.addShapes = function(novel) {
      var row;
      row = novel.append('svg');
      row.attr("class", "rownum");
      this.addDecor(row);
      this.iconView.append(row);
      this.barView.append(row);
      return novel;
    };

    Charts.prototype.draw = function(data) {
      var novel, sel;
      sel = this.select(data);
      novel = this.addShapes(sel.enter());
      this.iconView.update(sel);
      return this.barView.update(sel);
    };

    return Charts;

  })();

  Denigma.LifeCharts = (function(_super) {
    __extends(LifeCharts, _super);

    function LifeCharts(selector) {
      this.makeOY = __bind(this.makeOY, this);
      this.dXmax = __bind(this.dXmax, this);
      this.dXmean = __bind(this.dXmean, this);
      this.dXmin = __bind(this.dXmin, this);
      LifeCharts.__super__.constructor.call(this, selector);
    }

    LifeCharts.prototype.dMin = function(d) {
      return d.test.get("min");
    };

    LifeCharts.prototype.dMean = function(d) {
      return d.test.get("mean");
    };

    LifeCharts.prototype.dMax = function(d) {
      return d.test.get("max");
    };

    LifeCharts.prototype.makeOX = function(data) {
      var fun;
      fun = this.dMax;
      return d3.scale.linear().domain([0, d3.max(data, fun)]).range([this.marginX, this.width - this.marginX]);
    };

    LifeCharts.prototype.dXmin = function(ox) {
      var _this = this;
      return function(d) {
        return ox(_this.dMin(d));
      };
    };

    LifeCharts.prototype.dXmean = function(ox) {
      var _this = this;
      return function(d) {
        return ox(_this.dMean(d));
      };
    };

    LifeCharts.prototype.dXmax = function(ox) {
      var _this = this;
      return function(d) {
        return ox(_this.dMax(d));
      };
    };

    LifeCharts.prototype.makeOY = function(data) {
      return this.oy = d3.scale.ordinal().domain().rangeBands([this.marginY, this.height - this.marginY]);
    };

    return LifeCharts;

  })(Denigma.Charts);

}).call(this);
