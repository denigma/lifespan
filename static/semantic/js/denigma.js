// Generated by CoffeeScript 1.6.2
/*
  #Denigma chat App#
  Application coffee of the chat
*/


(function() {
  var Denigma, container, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  Batman.config.minificationErrors = false;

  Denigma = (function(_super) {
    __extends(Denigma, _super);

    /*
    Application object of the chat
    */


    function Denigma() {
      _ref = Denigma.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Denigma.root('');

    Denigma.workerHandler = function(e) {
      /*
        handles worker messages
      */
      return Denigma.login(e.data);
    };

    Denigma.login = function(data) {
      /*
        functions that fires when you logged in
        The loggin message can come from both shared webworker and loginform
        ant that is a reason why I put it here
      */

      var socket;

      if ((data.user != null) && (data.password != null)) {
        socket = Batman.Socket.getInstance(data.websocketURL);
        socket.router = new Batman.SimpleRouter();
        if (Denigma.ws != null) {
          socket.setWebsocket(Denigma.ws);
        } else {
          socket.setWebsocket(new WebSocket(data.websocketURL));
        }
        return Denigma.fire("login", data);
      }
    };

    Denigma.initWorker = function() {
      /*
        Decides whether it should connect directly or through shared webworker
      */
      if (Batman.container.workerURL != null) {
        Denigma.ws = new Batman.WorkerSocket(Batman.container.workerURL);
        return Denigma.ws.onmessage = function(e) {
          return Denigma.workerHandler(e);
        };
      }
    };

    Denigma.send = function(data) {
      /*
        TODO: rename the function
      */
      if (Denigma.ws != null) {
        return Denigma.ws.send(data);
      } else {
        return Denigma.login(data);
      }
    };

    return Denigma;

  })(Batman.App);

  container = Batman.container;

  container.Denigma = Denigma;

  Batman.EmptyDispatcher = (function(_super) {
    __extends(EmptyDispatcher, _super);

    /*
    to switch routing off
    */


    function EmptyDispatcher() {
      _ref1 = EmptyDispatcher.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return EmptyDispatcher;

  })(Batman.Object);

  if ((typeof window !== "undefined" && window !== null)) {
    window.addEventListener('load', function() {
      var disp;

      disp = new Batman.EmptyDispatcher();
      Denigma.set("navigator", disp);
      Denigma.set("dispatcher", disp);
      Denigma.run();
      return Denigma.initWorker();
    });
  }

  jQuery(function() {
    /*
    this function connects to socket when logging in
    */

    var message, password, url, username;

    username = Batman.container.username;
    password = Batman.container.password;
    url = Batman.container.websocketURL.replace(/&amp;/g, "&").replace("nouser", username).replace("none", username).replace("nopassword", password);
    Batman.container.websocketURL = url;
    message = {
      user: username,
      password: password,
      websocketURL: url
    };
    return Denigma.send(message);
  });

}).call(this);

/*
//@ sourceMappingURL=denigma.map
*/
