// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.TaskBoard = (function(_super) {
    __extends(TaskBoard, _super);

    function TaskBoard() {
      _ref = TaskBoard.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TaskBoard.set("hideCompleted", false);

    TaskBoard.classAccessor("items", function() {
      return Denigma.Task.get("all").filter(function(task) {
        return !Denigma.TaskBoard.get("hideCompleted") || !task.get('completed');
      });
    });

    TaskBoard.set("title", "");

    TaskBoard.pressKey = function(node, event) {
      if (event.keyCode === 13 && !(event.altKey || event.ctrlKey || event.shiftKey)) {
        return Denigma.TaskBoard.addNew(node, event);
      }
    };

    TaskBoard.newTask = function() {
      /*
        creates new empty message for binding
      */

      var tlt, userName;

      userName = Batman.container.username;
      tlt = Denigma.TaskBoard.get("title");
      return new Denigma.Task({
        id: Batman.SocketEvent.genId(),
        owner: userName,
        title: tlt,
        completed: false
      });
    };

    TaskBoard.addNew = function(node, event) {
      /*
        Adds new message
      */

      var task;

      if (Denigma.TaskBoard.get("title").length > 1) {
        task = Denigma.TaskBoard.newTask();
        task.save();
        return TaskBoard.set("title", "");
      }
    };

    TaskBoard.set("expanded", true);

    TaskBoard.toggle = function(node, event) {
      return TaskBoard.set("expanded", !TaskBoard.get("expanded"));
    };

    return TaskBoard;

  }).call(this, Batman.Object);

  Denigma.Board = (function(_super) {
    __extends(Board, _super);

    function Board() {
      _ref1 = Board.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Board;

  })(Batman.Object);

  /*
    ##Message board view model. Needed for various sophisticated operations with messages
  */


  Denigma.MessageBoard = (function(_super) {
    __extends(MessageBoard, _super);

    function MessageBoard() {
      _ref2 = MessageBoard.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    MessageBoard.set("text", "");

    MessageBoard.classAccessor("items", function() {
      return Denigma.Message.get("all");
    });

    MessageBoard.newMessage = function() {
      /*
        creates new empty message for binding
      */

      var txt, username;

      username = Batman.container.username;
      txt = Denigma.MessageBoard.get("text");
      return new Denigma.Message({
        user: username,
        text: txt
      });
    };

    MessageBoard.pressKey = function(node, event) {
      if (event.keyCode === 13 && !(event.altKey || event.ctrlKey || event.shiftKey)) {
        return Denigma.MessageBoard.addNew(node, event);
      }
    };

    MessageBoard.addNew = function(node, event) {
      /*
        Adds new message
      */

      var message;

      if (Denigma.MessageBoard.get("text").length > 1) {
        message = Denigma.MessageBoard.newMessage();
        message.save();
        return MessageBoard.set("text", "");
      }
    };

    MessageBoard.set("expanded", true);

    MessageBoard.toggle = function(node, event) {
      return MessageBoard.set("expanded", !MessageBoard.get("expanded"));
    };

    return MessageBoard;

  }).call(this, Denigma.Board);

  Denigma.UserBoard = (function(_super) {
    __extends(UserBoard, _super);

    function UserBoard() {
      _ref3 = UserBoard.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    UserBoard.classAccessor("items", function() {
      return Denigma.User.get("all");
    });

    UserBoard.set("expanded", true);

    UserBoard.toggle = function(node, event) {
      return UserBoard.set("expanded", !UserBoard.get("expanded"));
    };

    return UserBoard;

  }).call(this, Denigma.Board);

}).call(this);

/*
//@ sourceMappingURL=view_models.map
*/
